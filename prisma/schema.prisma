// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id
  username  String @unique
  displayName String
  avatarUrl  String?
  email String  @unique
  passwordHash	 String
  sessions Session[]
  accounts Account[]
  transactions Transaction[]
  categories Category[]
  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Account{
  id      String @id @default(cuid())
  user_id  String
  name    String
  transaction Transaction[]
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  @@map("accounts")
}

model Category{
  id      String @id @default(cuid())
  user_id  String
  name    String 
  transaction Transaction[]
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  @@map("categories")
}

model Transaction{
  id      String @id @default(cuid())
  userId  String
  amount  Decimal
  notes    String?
  payee   String 
  date    DateTime
  account_id String
  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
  category_id String?
  category Category?  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  @@map("transactions")
}